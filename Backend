from flask import Flask, request, jsonify
from flask_cors import CORS
import tensorflow as tf
import numpy as np
from PIL import Image
from tensorflow.keras.preprocessing.image import img_to_array
import base64
import logging
import sys
from io import BytesIO
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

model = tf.keras.models.load_model("C:/Users/SYS/OneDrive/Desktop/minila/base_data/models/meat3_model.h5")
model_class_names = ['Fresh', 'Spoiled', 'others']  # Define the class names

@app.route('/api/predict', methods=['POST'])
def predict():
        # Process the image and make the prediction
        # Get the uploaded image from the request
        image = request.files['image']


        # Save the uploaded image to a temporary location
        upload_path = "C:/Users/SYS/OneDrive/Desktop/minila/base_data/training_data"  # Specify the directory to save the file
        image.save(os.path.join(upload_path, 'uploaded_image.jpg'))
        image_path = os.path.join(upload_path, 'uploaded_image.jpg')

        # Load and preprocess the image
        img = Image.open(image_path)
        img_resize=img.resize((256,256))
        img_array = img_to_array(img_resize)
        img_batch = np.expand_dims(img_array, axis=0)

        # Perform prediction using the loaded model
        prediction = model.predict(img_batch)
        predicted_class_index = np.argmax(prediction[0])
        predicted_class = model_class_names[predicted_class_index]
        confidence = np.max(prediction[0])

        # Encode the image as base64
        with open(image_path,"rb") as image_file:
            image_data = image_file.read()
        base64_image=base64.b64encode(image_data).decode('utf-8')    

        # Return the predicted class and image as JSON response
        return{
            'food': predicted_class,
            'confidence': float(confidence),
            'image': base64_image
        }

if __name__ == '__main__':
    model.summary()
    app.run()

